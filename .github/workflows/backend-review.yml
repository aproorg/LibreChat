name: Backend Unit Tests
on:
  pull_request:
    branches:
      - main
      - dev
      - release/*
    paths:
      - 'api/**'
      - '.github/**'

concurrency:
  group: pullrequest-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}

jobs:
  tests_Backend:
    name: Run Backend unit tests
    timeout-minutes: 60
    runs-on: ubuntu-latest
    env:
      MONGO_URI: ${{ secrets.MONGO_URI }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      CREDS_KEY: ${{ secrets.CREDS_KEY }}
      CREDS_IV: ${{ secrets.CREDS_IV }}
      BAN_VIOLATIONS: ${{ secrets.BAN_VIOLATIONS }}
      BAN_DURATION: ${{ secrets.BAN_DURATION }}
      BAN_INTERVAL: ${{ secrets.BAN_INTERVAL }}
      NODE_ENV: CI
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github-oidc-genai
          aws-region: ${{ env.AWS_REGION }}

      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Setup npm cache
        uses: runs-on/cache@v4
        env:
          RUNS_ON_S3_BUCKET_CACHE: ${{ secrets.RUNS_ON_S3_BUCKET_CACHE }}
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Install Data Provider Package
        run: npm run build:data-provider

      - name: Install MCP Package
        run: npm run build:mcp

      - name: Create empty auth.json file
        run: |
          mkdir -p api/data
          echo '{}' > api/data/auth.json

      - name: Check for Circular dependency in rollup
        working-directory: ./packages/data-provider
        run: |
          output=$(npm run rollup:api)
          echo "$output"
          if echo "$output" | grep -q "Circular dependency"; then
            echo "Error: Circular dependency detected!"
            exit 1
          fi

      - name: Prepare .env.test file
        run: |
          cp api/test/.env.test.example api/test/.env.test
          cat api/test/.env.test

      - name: Run unit tests
        run: cd api && npm run test:ci

      - name: Run librechat-data-provider unit tests
        run: cd packages/data-provider && npm run test:ci

      - name: Run librechat-mcp unit tests
        run: cd packages/mcp && npm run test:ci

  success:
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    needs:
      - tests_Backend
    steps:
      - name: Check backend success
        run: '[[ ${{ needs.tests_Backend.result }} == "success" ]] || exit 1'
      - name: Announce success
        run: echo "Build is successful"
