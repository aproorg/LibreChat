name: Build and Push Docker Image to ECR

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths:
      - Dockerfile
      - Dockerfile.multi
      - 'api/**'
      - 'client/**'
      - 'packages/**'
      - '.github/**'

  merge_group:
    branches:
      - main
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read

concurrency:
  group: ecr-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  ECR_REPO: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/genai
  IS_PR: ${{ github.event_name == 'pull_request' }}
  SHOULD_PUSH_TO_ECR: ${{ contains(github.event.pull_request.labels.*.name, 'ecr-push') || github.event_name == 'merge_group' }}

jobs:
  build:
    runs-on: ubuntu-24.04-arm
    strategy:
      matrix:
        include:
          - target: api-build
            file: Dockerfile.multi
            image_name: api
          - target: node
            file: Dockerfile
            image_name: frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github-oidc-genai
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Genrate Short SHA
        id: set_shortSHA
        run: |
          calculatedSHA=$(git rev-parse --short ${{ github.sha }})
          echo "SHORT_SHA=$calculatedSHA" >> $GITHUB_ENV

      - name: Prepare environment
        run: |
          cp .env.example .env
          cat .env

      - name: Setup Docker layer cache
        uses: runs-on/cache@v4
        env:
          RUNS_ON_S3_BUCKET_CACHE: ${{ secrets.RUNS_ON_S3_BUCKET_CACHE }}
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.image_name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.image_name }}-

      - name: Build and push Docker images
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.file }}
          push: ${{ env.SHOULD_PUSH_TO_ECR }}
          tags: |
            ${{ env.ECR_REPO }}/${{ matrix.image_name }}:${{ env.SHORT_SHA }}
          platforms: linux/arm64
          target: ${{ matrix.target }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # Move cache to avoid unbounded cache growth
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  success:
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    needs:
      - build
    steps:
      - name: Check build success
        run: '[[ ${{ needs.build.result }} == "success" ]] || exit 1'
      - name: Announce success
        run: echo "Build is successful"
